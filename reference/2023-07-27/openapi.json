{
  "openapi": "3.0.2",
  "info": {
    "title": "Runa",
    "version": "2.0",
    "description": "The public Runa API",
    "license": {
      "name": "â’¸ Runa"
    }
  },
  "servers": [
    {
      "url": "https://playground.runa.io/v2",
      "description": "Playground"
    },
    {
      "url": "https://api.runa.io/v2",
      "description": "Production"
    }
  ],
  "tags": [
    {
      "name": "balance",
      "description": "Operations related to account balance."
    },
    {
      "name": "products",
      "description": "Operations related to products."
    },
    {
      "name": "orders",
      "description": "Operations related to ordering and orders."
    }
  ],
  "paths": {
    "/balance": {
      "get": {
        "operationId": "getBalance",
        "tags": ["balance"],
        "summary": "Get Account Balance",
        "description": "Retrieves the account balance. Returns the balance in a specified currency if the currency parameter is provided. If not, returns all balances greater than 0.",
        "parameters": [
          { "$ref": "#/components/parameters/X-Api-Version" },
          {
            "required": false,
            "name": "currency",
            "schema": {
              "type": "string",
              "title": "Currency Code"
            },
            "in": "query",
            "description": "The 3-letter currency code (uppercase) for which to return the balance."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "balance": {
                          "type": "string"
                        },
                        "currency": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "balance": "10.0",
                        "currency": "USD"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "balance": {
                            "type": "string"
                          },
                          "currency": {
                            "type": "string"
                          }
                        }
                      },
                      "example": [
                        {
                          "balance": "10.0",
                          "currency": "USD"
                        },
                        {
                          "balance": "8.5",
                          "currency": "GBP"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/product": {
      "get": {
        "operationId": "getProducts",
        "tags": ["products"],
        "summary": "List Products",
        "description": "Listing of products available for purchase by country.",
        "parameters": [
          { "$ref": "#/components/parameters/X-Api-Version" },
          {
            "required": true,
            "name": "country_code",
            "schema": {
              "type": "string",
              "title": "Country Code"
            },
            "in": "query",
            "description": "Country code for which to return a list of products."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Getproducts",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/order": {
      "get": {
        "operationId": "getListOfOrders",
        "tags": ["orders"],
        "summary": "Get a list of orders.",
        "description": "Get a list of all of your orders.",
        "parameters": [
          { "$ref": "#/components/parameters/X-Api-Version" },
          {
            "required": false,
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "description": "The number (1&ndash;100) of orders to include in each page of orders. Default: 100."
          },
          {
            "required": false,
            "name": "before",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "A cursor. Using this parameter will return the page of orders from *before* the cursor (i.e., the _previous_ page). The `before` and `after` cursors are mutually exclusive (you can't use them at the same time). Get this value from the `pagination` section of any page of orders."
          },
          {
            "required": false,
            "name": "after",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "A cursor. Using this parameter will return the page of orders from *after* the cursor (i.e., the _next_ page). The `before` and `after` cursors are mutually exclusive (you can't use them at the same time). Get this value from the `pagination` section of any page of orders."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageableResult_Union_CompletedOrderWithBasicDetails__IncompleteOrder__"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      },
      "post": {
        "operationId": "createOrder",
        "tags": ["orders"],
        "summary": "Create a new order.",
        "description": "Creates a new order.",
        "parameters": [
          { "$ref": "#/components/parameters/X-Api-Version" },
          {
            "required": true,
            "name": "X-Idempotency-Key",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "description": "A unique string that prevents order duplication."
          },
          {
            "name": "X-Execution-Mode",
            "schema": {
              "type": "string",
              "enum": ["async", "sync"],
              "default": "async"
            },
            "in": "header",
            "description": "Choose sync if you want to retrieve the payout links directly from the API response. Choose async if you want to poll for your order. The default if unset is async.",
            "example": "async"
          }
        ],
        "responses": {
          "200": {
            "description": "Response that will be returned in sync execution mode. Order has successfully been completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncCompletedOrderWithFullDetails"
                }
              }
            }
          },
          "202": {
            "description": "Response that will be returned in async execution mode. Order has successfully been accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderTask"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "422": { "$ref": "#/components/responses/ValidationError" },
          "429": { "$ref": "#/components/responses/RateExceeded" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewOrderDetails"
              }
            }
          }
        }
      }
    },
    "/order/{id}": {
      "get": {
        "operationId": "getSingleOrder",
        "tags": ["orders"],
        "summary": "Get an order's details and status.",
        "description": "Get the details and status of a specific order. Use to poll for the status of your order after it's been accepted.",
        "parameters": [
          { "$ref": "#/components/parameters/X-Api-Version" },
          {
            "required": true,
            "name": "id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "description": "The ID of the order."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/CompletedOrderWithFullDetails"
                    },
                    {
                      "$ref": "#/components/schemas/IncompleteOrder"
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/order/estimate": {
      "post": {
        "operationId": "estimateOrderPrice",
        "tags": ["orders"],
        "summary": "Estimate order",
        "description": "Estimate price for the order.",
        "parameters": [{ "$ref": "#/components/parameters/X-Api-Version" }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderPriceResponse"
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "422": { "$ref": "#/components/responses/ValidationError" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPriceRequest"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "X-Api-Version": {
        "name": "X-Api-Version",
        "description": "The dated version of the API, if not specified a default is used.",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "APIErrorResponse": {
        "title": "APIErrorResponse",
        "required": ["type", "message"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "description": "An error code or type.",
            "type": "string",
            "example": "not-found"
          },
          "message": {
            "title": "Message",
            "description": "A human readable summary of the error.",
            "type": "string",
            "example": "The requested resource was not found"
          },
          "help": {
            "title": "Help",
            "description": "Additional information that pertains to the error.",
            "type": "string",
            "example": "Please check the resource ID and try again."
          }
        },
        "description": "Generic Runa API error response."
      },
      "AccountPayment": {
        "title": "AccountPayment",
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "description": "Account balance payment.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountPaymentType"
              }
            ]
          }
        },
        "description": "Account balance payment."
      },
      "AccountPaymentType": {
        "title": "AccountPaymentType",
        "type": "string",
        "enum": ["ACCOUNT_BALANCE"],
        "description": "Account balance payment."
      },
      "CompletedOrderItem": {
        "title": "CompletedOrderItem",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "The ID of the order item.",
            "example": "E-NWPEKW4VL",
            "type": "string"
          },
          "distribution_method": {
            "title": "Distribution Method",
            "description": "The distribution method used for the payout link.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/EmailDistribution"
              },
              {
                "$ref": "#/components/schemas/LinkDistribution"
              }
            ]
          },
          "products": {
            "title": "Products",
            "description": "The product(s) the end user can redeem the payout link on.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/MultipleProduct"
              },
              {
                "$ref": "#/components/schemas/SingleProduct"
              },
              {
                "$ref": "#/components/schemas/PayoutSelectionTemplateDetailed"
              },
              {
                "$ref": "#/components/schemas/UnknownProduct"
              }
            ]
          },
          "face_value": {
            "title": "Face Value",
            "description": "The face value of the payout link.",
            "example": "10",
            "type": "number"
          },
          "price": {
            "title": "Price",
            "description": "The price paid for the payout link.",
            "example": "10",
            "type": "number"
          },
          "discount_multiplier": {
            "title": "Discount Multiplier",
            "description": "The discount multiplier of the order item. e.g. 0.1 means 10% discount. The discount is applied on the price of the order item before any fees are applied.",
            "example": "0.1",
            "type": "number"
          },
          "redemption_url": {
            "title": "Redemption Url",
            "description": "The URL (payout link) the end user uses to redeem.",
            "type": "string",
            "deprecated": true
          },
          "payout": {
            "title": "Payout",
            "description": "Payout link details",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutDetails"
              }
            ]
          }
        },
        "required": [
          "id",
          "distribution_method",
          "products",
          "face_value",
          "price",
          "redemption_url",
          "payout"
        ]
      },
      "CompletedOrderWithBasicDetails": {
        "title": "CompletedOrderWithBasicDetails",
        "required": [
          "id",
          "status",
          "created_at",
          "payment_method",
          "currency",
          "total_price",
          "total_discount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "The ID of the order.",
            "example": "O-01H5WQGHKCBB85MQFM68S9KJ5Q",
            "type": "string"
          },
          "status": {
            "description": "Status of the order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderStatusEnum"
              }
            ]
          },
          "created_at": {
            "title": "Created At",
            "description": "UTC timestamp, in ISO 8601 format, when the order was submitted.",
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "title": "Completed At",
            "description": "UTC timestamp, in ISO 8601 format, when the order was completed.",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "description": "Free format text reference for the order.",
            "type": "string"
          },
          "payment_method": {
            "title": "Payment Method",
            "description": "The payment method used for the order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountPayment"
              }
            ]
          },
          "currency": {
            "title": "Currency",
            "description": "The currency of the order.",
            "example": "USD",
            "type": "string"
          },
          "total_price": {
            "title": "Total Price",
            "description": "The total price of the order. This _includes_ any applicable fees.",
            "example": "10",
            "type": "number"
          },
          "total_discount": {
            "title": "Total Discount",
            "description": "The total discount of the order.",
            "type": "number"
          }
        },
        "description": "Used for orders that have completed. This class is typically used when returning\na *list* of orders to the client."
      },
      "SyncCompletedOrderWithFullDetails": {
        "title": "CompletedOrderWithFullDetails",
        "required": [
          "id",
          "status",
          "created_at",
          "payment_method",
          "currency",
          "total_price",
          "total_discount",
          "items"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "The ID of the order.",
            "example": "O-01H5WQGHKCBB85MQFM68S9KJ5Q",
            "type": "string"
          },
          "status": {
            "description": "Status of the order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SyncOrderStatusEnum"
              }
            ]
          },
          "created_at": {
            "title": "Created At",
            "description": "UTC timestamp, in ISO 8601 format, when the order was submitted.",
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "title": "Completed At",
            "description": "UTC timestamp, in ISO 8601 format, when the order was completed.",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "description": "Free format text reference for the order.",
            "type": "string"
          },
          "payment_method": {
            "title": "Payment Method",
            "description": "The payment method used for the order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountPayment"
              }
            ]
          },
          "currency": {
            "title": "Currency",
            "description": "The currency of the order.",
            "example": "USD",
            "type": "string"
          },
          "total_price": {
            "title": "Total Price",
            "description": "The total price of the order. This _includes_ any applicable fees.",
            "example": "10",
            "type": "number"
          },
          "total_discount": {
            "title": "Total Discount",
            "description": "The total discount of the order.",
            "type": "number"
          },
          "items": {
            "title": "Items",
            "description": "The list of items that were included in the order. Each _item_ represents a single payout link.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompletedOrderItem"
            }
          }
        },
        "description": "Used for an order that has completed. This class is typically used when returning\na *single order* to the client."
      },
      "RateExceededResponse": {
        "title": "RateExceededResponse",
        "required": ["error"],
        "type": "object",
        "properties": {
          "error": {
            "title": "Error",
            "description": "A human readable error message describing the error.",
            "type": "string",
            "example": "rate exceeded"
          }
        },
        "description": "API rate limited error response."
      },
      "SyncOrderStatusEnum": {
        "title": "SyncOrderStatusEnum",
        "type": "string",
        "enum": ["COMPLETED"],
        "description": "The status of the order."
      },
      "CompletedOrderWithFullDetails": {
        "title": "CompletedOrderWithFullDetails",
        "required": [
          "id",
          "status",
          "created_at",
          "payment_method",
          "currency",
          "total_price",
          "total_discount",
          "items"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "The ID of the order.",
            "example": "O-01H5WQGHKCBB85MQFM68S9KJ5Q",
            "type": "string"
          },
          "status": {
            "description": "Status of the order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderStatusEnum"
              }
            ]
          },
          "created_at": {
            "title": "Created At",
            "description": "UTC timestamp, in ISO 8601 format, when the order was submitted.",
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "title": "Completed At",
            "description": "UTC timestamp, in ISO 8601 format, when the order was completed.",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "description": "Free format text reference for the order.",
            "type": "string"
          },
          "payment_method": {
            "title": "Payment Method",
            "description": "The payment method used for the order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountPayment"
              }
            ]
          },
          "currency": {
            "title": "Currency",
            "description": "The currency of the order.",
            "example": "USD",
            "type": "string"
          },
          "total_price": {
            "title": "Total Price",
            "description": "The total price of the order. This _includes_ any applicable fees.",
            "example": "10",
            "type": "number"
          },
          "total_discount": {
            "title": "Total Discount",
            "description": "The total discount of the order.",
            "type": "number"
          },
          "items": {
            "title": "Items",
            "description": "The list of items that were included in the order. Each _item_ represents a single payout link.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompletedOrderItem"
            }
          }
        },
        "description": "Used for an order that has completed. This class is typically used when returning\na *single order* to the client."
      },
      "Currency": {
        "title": "Currency",
        "type": "string",
        "enum": [
          "USD",
          "GBP",
          "EUR",
          "CAD",
          "AUD",
          "CHF",
          "CNY",
          "CZK",
          "DKK",
          "HUF",
          "JPY",
          "MXN",
          "NOK",
          "NZD",
          "PLN",
          "RON",
          "SEK",
          "SGD",
          "ZAR"
        ],
        "description": "ISO 4217 currency code."
      },
      "CurrencyEnum": {
        "title": "CurrencyEnum",
        "enum": [
          "USD",
          "GBP",
          "EUR",
          "CAD",
          "AUD",
          "CHF",
          "CNY",
          "CZK",
          "DKK",
          "HUF",
          "JPY",
          "MXN",
          "NOK",
          "NZD",
          "PLN",
          "RON",
          "SEK",
          "SGD",
          "ZAR"
        ],
        "description": "An enumeration."
      },
      "EmailDistribution": {
        "title": "EmailDistribution",
        "required": ["type", "email_address"],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EmailDistributionType"
          },
          "email_address": {
            "title": "Email Address",
            "description": "The email address of the end user to send the payout link to.",
            "example": "fred@bloggs.com",
            "type": "string",
            "format": "email"
          },
          "template_id": {
            "title": "Template ID",
            "description": "The template ID for a User Redemption Template.",
            "example": "DT-01HPSF51G0ZWHJ3JTNWRH0WDYK",
            "type": "string"
          }
        },
        "description": "Email distribution. Send the payout link to the end user directly via email."
      },
      "EmailDistributionType": {
        "title": "EmailDistributionType",
        "type": "string",
        "enum": ["EMAIL"],
        "description": "Supported email distribution types."
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "IncompleteOrder": {
        "title": "IncompleteOrder",
        "required": ["id", "status", "message"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "The ID of the order.",
            "example": "O-01H5WQGHKCBB85MQFM68S9KJ5Q",
            "type": "string"
          },
          "status": {
            "description": "Status of the order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderStatusEnum"
              }
            ]
          },
          "message": {
            "title": "Message",
            "description": "Human readable message describing the status of the order.",
            "type": "string"
          }
        },
        "description": "Order that has been accepted but is not complete."
      },
      "LinkDistribution": {
        "title": "LinkDistribution",
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/LinkDistributionType"
          },
          "template_id": {
            "title": "Template ID",
            "description": "The template ID for a User Redemption Template.",
            "example": "DT-01HPSF51G0ZWHJ3JTNWRH0WDYK",
            "type": "string"
          }
        },
        "description": "Link distribution. Send the payout link to the end user yourself."
      },
      "LinkDistributionType": {
        "title": "LinkDistributionType",
        "type": "string",
        "enum": ["PAYOUT_LINK"],
        "description": "Supported link distribution types."
      },
      "MultipleProduct": {
        "title": "MultipleProduct",
        "required": ["type", "values"],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/MultipleProductType"
          },
          "values": {
            "title": "Values",
            "description": "The codes for the products the end user can choose from when redeeming their payout link. All products _must_ use the same currency.",
            "example": ["AMZ-US", "AIRBNB-US"],
            "minItems": 2,
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        },
        "description": "Multiple products. The end user will be able to split the payout link's value\nbetween these products."
      },
      "MultipleProductType": {
        "title": "MultipleProductType",
        "type": "string",
        "enum": ["MULTIPLE"],
        "description": "Multiple products. When more than one product code is provided."
      },
      "PayoutSelectionTemplate": {
        "title": "PayoutSelectionTemplate",
        "required": ["type", "template_id"],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PayoutSelectionTemplateType"
          },
          "template_id": {
            "title": "Template ID",
            "description": "The template ID for a Payout Selection Template.",
            "example": "PT-01HPSF51G0ZWHJ3JTNWRH0WDYK",
            "type": "string"
          }
        },
        "description": "Payout selection template. Template having predefined set of products."
      },
      "PayoutSelectionTemplateDetailed": {
        "title": "PayoutSelectionTemplateDetailed",
        "required": ["type", "template_id"],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PayoutSelectionTemplateType"
          },
          "template_id": {
            "title": "Template ID",
            "description": "The template ID for a Payout Selection Template.",
            "example": "PT-01HPSF51G0ZWHJ3JTNWRH0WDYK",
            "type": "string"
          },
          "values": {
            "title": "Values",
            "description": "The codes for products selected for Payout Selection Template.",
            "example": ["AMZ-US", "AIRBNB-US"],
            "minItems": 2,
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        },
        "description": "Payout selection template. Template having predefined set of products."
      },
      "PayoutSelectionTemplateType": {
        "title": "PayoutSelectionTemplateType",
        "type": "string",
        "enum": ["TEMPLATE"],
        "description": "Payout Selection Template"
      },
      "NewAccountPayment": {
        "title": "NewAccountPayment",
        "required": ["type", "currency"],
        "type": "object",
        "properties": {
          "type": {
            "description": "Account balance payment method.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountPaymentType"
              }
            ]
          },
          "currency": {
            "description": "ISO 4217 currency code.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ]
          }
        },
        "description": "Pay using your account balance."
      },
      "NewOrderDetails": {
        "title": "NewOrderDetails",
        "required": ["payment_method", "items"],
        "type": "object",
        "properties": {
          "payment_method": {
            "title": "Payment Method",
            "description": "Payment method for the order. Select the `ACCOUNT_BALANCE` you want to pay for the order from",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewAccountPayment"
              }
            ]
          },
          "items": {
            "title": "Items",
            "description": "The list of items to be included in the order. Each item ordered results in a single payout link. The maximum number of items per order is 200.",
            "minItems": 1,
            "maxItems": 200,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewOrderItemDetails"
            }
          },
          "description": {
            "title": "Description",
            "description": "Free format text reference for the order. Maximum length is 128 characters.",
            "maxLength": 128,
            "type": "string"
          }
        }
      },
      "NewOrderItemDetails": {
        "title": "NewOrderItemDetails",
        "required": ["face_value", "distribution_method", "products"],
        "type": "object",
        "properties": {
          "face_value": {
            "title": "Face Value",
            "description": "Face value of the payout link.",
            "minimum": 0.01,
            "example": 10,
            "type": "number"
          },
          "distribution_method": {
            "title": "Distribution Method",
            "description": "Distribution method to send end users the payout link. Choose `EMAIL` if you want Runa to send the payout link to the end user directly. Choose `PAYOUT_LINK` if you want to send the payout link to the end user yourself.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/EmailDistribution"
              },
              {
                "$ref": "#/components/schemas/LinkDistribution"
              }
            ]
          },
          "products": {
            "title": "Products",
            "description": "Choose `SINGLE` if you want the end user to redeem the face value on a single specific product. Choose `MULTIPLE` if the end user can choose to spend the face value across multiple products. Choose `TEMPLATE` if you want to use predefined Payout Selection Template.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/MultipleProduct"
              },
              {
                "$ref": "#/components/schemas/SingleProduct"
              },
              {
                "$ref": "#/components/schemas/PayoutSelectionTemplate"
              }
            ]
          }
        }
      },
      "OrderItemDiscount": {
        "title": "OrderItemDiscount",
        "required": ["products", "face_value", "price", "discount_multiplier"],
        "type": "object",
        "properties": {
          "products": {
            "title": "Products",
            "description": "Choose `SINGLE` if you want the end user to redeem the face value on a single specific product. Choose `MULTIPLE` if the end user can choose to spend the face value across multiple products.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/MultipleProduct"
              },
              {
                "$ref": "#/components/schemas/SingleProduct"
              }
            ]
          },
          "face_value": {
            "title": "Face Value",
            "description": "Face value of the reward link.",
            "example": 10,
            "type": "number"
          },
          "price": {
            "title": "Price",
            "description": "The price of the order item.",
            "type": "number"
          },
          "discount_multiplier": {
            "title": "Discount Multiplier",
            "description": "The discount multiplier of the order item. 0 means no discount and 0.1 means 10% discount. The discount is applied on the price of the order item before any fees are applied.",
            "type": "number"
          }
        },
        "description": "The computed discount for an order item."
      },
      "OrderItemPriceRequest": {
        "title": "OrderItemPriceRequest",
        "required": ["products", "face_value"],
        "type": "object",
        "properties": {
          "products": {
            "title": "Products",
            "description": "Choose `SINGLE` if you want the end user to redeem the face value on a single specific product. Choose `MULTIPLE` if the end user can choose to spend the face value across multiple products.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/MultipleProduct"
              },
              {
                "$ref": "#/components/schemas/SingleProduct"
              }
            ]
          },
          "face_value": {
            "title": "Face Value",
            "description": "Face value of the reward link.",
            "example": 10,
            "type": "number"
          }
        },
        "description": "A proposed order item within an order price request."
      },
      "OrderPriceRequest": {
        "title": "OrderPriceRequest",
        "required": ["payment_method", "items"],
        "type": "object",
        "properties": {
          "payment_method": {
            "title": "Payment Method",
            "description": "Payment method for the order. Select the ACCOUNT_BALANCE you want to pay for the order from.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewAccountPayment"
              }
            ]
          },
          "items": {
            "title": "Items",
            "description": "List of order items for price estimation.",
            "minItems": 1,
            "maxItems": 500,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemPriceRequest"
            }
          }
        },
        "description": "Request for a price estimate for an order."
      },
      "OrderPriceResponse": {
        "title": "OrderPriceResponse",
        "required": [
          "payment_method",
          "items",
          "currency",
          "total_discount",
          "total_price"
        ],
        "type": "object",
        "properties": {
          "payment_method": {
            "title": "Payment Method",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountPayment"
              }
            ]
          },
          "items": {
            "title": "Items",
            "description": "List of order items with price and discount.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemDiscount"
            }
          },
          "currency": {
            "description": "Currency of the reward link.",
            "example": "GBP",
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyEnum"
              }
            ]
          },
          "total_discount": {
            "title": "Total Discount",
            "description": "Total discount on the entire order.",
            "type": "number"
          },
          "total_price": {
            "title": "Total Price",
            "description": "Total price of the entire order.",
            "type": "number"
          }
        },
        "description": "Response object for a order price estimate."
      },
      "OrderStatusEnum": {
        "title": "OrderStatusEnum",
        "type": "string",
        "enum": ["COMPLETED", "FAILED", "PROCESSING"],
        "description": "The status of the order."
      },
      "OrderTask": {
        "title": "OrderTask",
        "required": ["id", "status"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "The ID of your new order.",
            "example": "O-01H5WQGHKCBB85MQFM68S9KJ5Q",
            "type": "string"
          },
          "status": {
            "description": "The status of your order.",
            "example": "PROCESSING",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderStatusEnum"
              }
            ]
          }
        }
      },
      "Page": {
        "title": "Page",
        "type": "object",
        "properties": {
          "limit": {
            "title": "Limit",
            "description": "How many records the current page is limited to.",
            "example": 100,
            "type": "integer"
          }
        }
      },
      "PageCursors": {
        "title": "PageCursors",
        "type": "object",
        "properties": {
          "after": {
            "title": "After",
            "description": "Cursor to query the next page.",
            "example": "ZXhhbXBsZW9mYWN1cnNvcg==",
            "type": "string"
          },
          "before": {
            "title": "Before",
            "description": "Cursor to query the previous page.",
            "example": "ZXhhbXBsZW9mYWN1cnNvcg==",
            "type": "string"
          }
        }
      },
      "PageableMeta": {
        "title": "PageableMeta",
        "required": ["cursors", "page"],
        "type": "object",
        "properties": {
          "cursors": {
            "title": "Cursors",
            "description": "Pagination cursors.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PageCursors"
              }
            ]
          },
          "page": {
            "title": "Page",
            "description": "Page metadata.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Page"
              }
            ]
          }
        }
      },
      "PageableResult_Union_CompletedOrderWithBasicDetails__IncompleteOrder__": {
        "title": "PageableResult[Union[CompletedOrderWithBasicDetails, IncompleteOrder]]",
        "required": ["items", "pagination"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "description": "The list of items that were queried for.",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CompletedOrderWithBasicDetails"
                },
                {
                  "$ref": "#/components/schemas/IncompleteOrder"
                }
              ]
            }
          },
          "pagination": {
            "title": "Pagination",
            "description": "Metadata of the result page.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PageableMeta"
              }
            ]
          }
        }
      },
      "Product": {
        "title": "Product",
        "required": [
          "code",
          "name",
          "image_url",
          "denomination_type",
          "categories",
          "discount_multiplier",
          "price_multiplier"
        ],
        "type": "object",
        "properties": {
          "code": {
            "title": "Code",
            "type": "string",
            "description": "Product identifier.",
            "example": "tFV1"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Product name.",
            "example": "FV One"
          },
          "image_url": {
            "title": "Image Url",
            "type": "string",
            "description": "Product image url."
          },
          "denomination_type": {
            "title": "Denomination Type",
            "type": "string",
            "description": "Product denomination type.",
            "example": "open"
          },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCategory"
            },
            "description": "List of categories a given product belongs to."
          },
          "minimum_value": {
            "title": "Minimum Value",
            "type": "number",
            "description": "Minimum order value for a given product.",
            "example": 1
          },
          "maximum_value": {
            "title": "Maximum Value",
            "type": "number",
            "description": "Maximum order value for a given product.",
            "example": 10
          },
          "available_denominations": {
            "title": "Available Denominations",
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "List of suggested denomination values of a product.",
            "example": [5, 10]
          },
          "discount_multiplier": {
            "title": "Discount Multiplier",
            "type": "number",
            "description": "The discount multiplier. For example, 0.1 is a 10% discount on the value of the product.",
            "example": 0.1
          },
          "price_multiplier": {
            "title": "Price Multiplier",
            "type": "number",
            "description": "The price multiplier multiplied by the value of the product will give you the price you will pay to purchase it.",
            "example": 0.9
          }
        }
      },
      "ProductCategory": {
        "title": "ProductCategory",
        "required": ["code", "name"],
        "type": "object",
        "properties": {
          "code": {
            "title": "Code",
            "type": "string",
            "description": "Product category code.",
            "example": "department-stores"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Product category name.",
            "example": "Department Stores"
          }
        }
      },
      "SingleProduct": {
        "title": "SingleProduct",
        "required": ["type", "value"],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SingleProductType"
          },
          "value": {
            "title": "Value",
            "description": "The code for the product the end user will get when redeeming their payout link.",
            "minLength": 1,
            "example": "AMZ-US",
            "type": "string"
          }
        },
        "description": "Single product. The end user will be able to redeem the payout link for this\nspecific product."
      },
      "SingleProductType": {
        "title": "SingleProductType",
        "type": "string",
        "enum": ["SINGLE"],
        "description": "Single product. When only one product code is provided."
      },
      "UnknownProduct": {
        "title": "UnknownProduct",
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "description": "It is not currently possible to determine which products were selected when this item was ordered.",
            "default": "UNKNOWN",
            "type": "string"
          }
        },
        "description": "Product(s) unknown. It was not possible to determine which products were included\nin the order."
      },
      "PayoutStatus": {
        "title": "Payout status",
        "description": "Current status of the payout link. An `ACTIVE` link is live but has not been claimed yet, it will change to `CLAIMED` once that has happened. If you request a cancellation the status will reflect this as `CANCELLED`. Finally if your account is configured with expiry, when a link expires it will be marked as `EXPIRED`.",
        "enum": ["ACTIVE", "CLAIMED", "CANCELLED", "EXPIRED"]
      },
      "PayoutDetails": {
        "title": "PayoutDetails",
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PayoutStatus"
          },
          "status_updated_at": {
            "title": "Status Updated At",
            "description": "Time that the payout link status was last updated",
            "type": "string",
            "format": "date-time"
          },
          "url": {
            "title": "Url",
            "description": "The URL (payout link) the end user uses to redeem.",
            "type": "string"
          },
          "expiry_date": {
            "title": "Expiry Date",
            "description": "The date that the payout link expires.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["status", "status_updated_at", "url"]
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": ["loc", "msg", "type"],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "ValidationErrorItem": {
        "title": "ValidationErrorItem",
        "required": ["type", "message", "location"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "description": "The type of error encountered.",
            "type": "string",
            "example": "value_error.number.not_ge"
          },
          "message": {
            "title": "Message",
            "description": "A human readable summary of the error.",
            "type": "string",
            "example": "ensure this value is greater than or equal to 1"
          },
          "location": {
            "title": "Location",
            "description": "The location of the error in the submitted entity.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["items", "0", "face_value"]
          }
        },
        "description": "A single validation error. The type indicates the error type and the message provides a human readable summary of the error. The location provides a path to the key in the request body."
      },
      "ValidationErrorResponse": {
        "title": "ValidationErrorResponse",
        "required": ["type", "message", "details"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "description": "An error code or type.",
            "type": "string",
            "example": "validation_error"
          },
          "message": {
            "title": "Message",
            "description": "A human readable summary of the error.",
            "type": "string",
            "example": "There were one or more problems processing your request, see details key."
          },
          "help": {
            "title": "Help",
            "description": "Additional information that pertains to the error.",
            "type": "string",
            "example": null
          },
          "details": {
            "title": "Details",
            "description": "Additional details regarding the error.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationErrorItem"
            }
          }
        },
        "description": "A validation error response. Returned when the request failed validation. This response can contain multiple validation errors, see the details key for each."
      }
    },
    "responses": {
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIErrorResponse"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIErrorResponse"
            }
          }
        }
      },
      "RateExceeded": {
        "description": "Rate limit exceeded",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RateExceededResponse"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIErrorResponse"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIErrorResponse"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIErrorResponse"
            }
          }
        }
      },
      "ValidationError": {
        "description": "Request failed validation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationErrorResponse"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Api-Key"
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}
