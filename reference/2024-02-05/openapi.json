{
  "openapi": "3.1.1",
  "info": {
    "title": "Runa",
    "version": "2.0",
    "description": "The public Runa API",
    "license": {
      "name": "â’¸ Runa",
      "url": "https://runa.io/terms-of-use"
    },
    "contact": {
      "name": "Runa",
      "url": "https://runa.io",
      "email": "info@runa.io"
    }
  },
  "externalDocs": {
    "url": "https://developer.runa.com/reference",
    "description": "Runa API Reference"
  },
  "servers": [
    {
      "url": "https://playground.runa.io/v2",
      "description": "Playground"
    },
    {
      "url": "https://api.runa.io/v2",
      "description": "Production"
    }
  ],
  "tags": [
    {
      "name": "balance",
      "description": "Operations related to account balance."
    },
    {
      "name": "products",
      "description": "Operations related to products."
    },
    {
      "name": "orders",
      "description": "Operations related to ordering and orders."
    }
  ],
  "paths": {
    "/balance": {
      "get": {
        "operationId": "getBalance",
        "tags": ["balance"],
        "summary": "Get account balance",
        "description": "Retrieves the account balance. Returns the balance in a specified currency if the currency parameter is provided. If not, returns all balances greater than 0.",
        "parameters": [
          { "$ref": "#/components/parameters/X-Api-Version" },
          { "$ref": "#/components/parameters/CurrencyForAccount" }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Single balance",
                      "description": "If the `currency` parameter is provided, the response will be a single balance object.",
                      "type": "object",
                      "properties": {
                        "balance": {
                          "$ref": "#/components/schemas/BalanceForAccount"
                        },
                        "currency": {
                          "$ref": "#/components/schemas/CurrencyForAccount"
                        }
                      }
                    },
                    {
                      "title": "Multiple balances",
                      "description": "If the `currency` parameter is omitted, the response will be an array of balance objects.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "balance": {
                            "$ref": "#/components/schemas/BalanceForAccount"
                          },
                          "currency": {
                            "$ref": "#/components/schemas/CurrencyForAccount"
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Single Balance": {
                    "summary": "Single balance",
                    "value": {
                      "balance": "10.00",
                      "currency": "USD"
                    }
                  },
                  "Multiple Balances": {
                    "summary": "Multiple balances",
                    "value": [
                      { "balance": "10.00", "currency": "USD" },
                      { "balance": "8.50", "currency": "GBP" }
                    ]
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/order": {
      "get": {
        "operationId": "getListOfOrders",
        "tags": ["orders"],
        "summary": "List orders",
        "description": "Get a list of all of your orders",
        "parameters": [
          { "$ref": "#/components/parameters/X-Api-Version" },
          {
            "required": false,
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 500,
              "default": 100
            },
            "in": "query",
            "description": "The number (1&ndash;500) of orders to include in each page of orders. Default: 100."
          },
          { "$ref": "#/components/parameters/BeforeCursor" },
          { "$ref": "#/components/parameters/AfterCursor" }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["items", "pagination"],
                  "properties": {
                    "items": {
                      "title": "Items",
                      "description": "The list of orders in the page.",
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/CompletedOrderWithBasicDetails"
                          },
                          {
                            "$ref": "#/components/schemas/IncompleteOrder"
                          }
                        ]
                      }
                    },
                    "pagination": {
                      "title": "Pagination",
                      "description": "Metadata of the result page.",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PageableMeta"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      },
      "post": {
        "operationId": "createOrder",
        "tags": ["orders"],
        "summary": "Create a new order.",
        "description": "Creates a new order.",
        "parameters": [
          { "$ref": "#/components/parameters/X-Api-Version" },
          {
            "required": true,
            "name": "X-Idempotency-Key",
            "schema": {
              "type": "string"
            },
            "in": "header",
            "description": "A unique string that prevents order duplication. See [Idempotency](/best-practices/idempotency) for more information."
          },
          {
            "name": "X-Execution-Mode",
            "schema": {
              "type": "string",
              "enum": ["async", "sync"],
              "default": "async"
            },
            "in": "header",
            "description": "Whether to process the order synchronously or asynchronously. If this header is omitted we default to async. See [which mode to use](/getting-started/first-order/which-mode) to help you decide which execution mode is right for your use case. Sync orders are limited to a single order item.",
            "example": "async"
          }
        ],
        "responses": {
          "200": {
            "description": "Response that will be returned in sync execution mode. Order has successfully been completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncCompletedOrder"
                }
              }
            }
          },
          "202": {
            "description": "Response that will be returned in async execution mode. Order has successfully been accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncAcceptedOrder"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "422": { "$ref": "#/components/responses/ValidationError" },
          "429": { "$ref": "#/components/responses/RateExceeded" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        },
        "requestBody": {
          "required": true,
          "description": "The details of the order to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewOrderDetails"
              }
            }
          }
        }
      }
    },
    "/order/{id}": {
      "get": {
        "operationId": "getSingleOrder",
        "tags": ["orders"],
        "summary": "Get order details",
        "description": "Get the details and status of a specific order. Can be used for checking the status of an async order after it's been accepted.",
        "parameters": [
          { "$ref": "#/components/parameters/X-Api-Version" },
          {
            "required": true,
            "name": "id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "description": "The ID of the order.",
            "example": "O-01H5WQGHKCBB85MQFM68S9KJ5Q"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CompletedOrderWithFullDetails"
                    },
                    {
                      "$ref": "#/components/schemas/IncompleteOrder"
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/order/estimate": {
      "post": {
        "operationId": "estimateOrderPrice",
        "tags": ["orders"],
        "summary": "Estimate order",
        "description": "Estimate price for the order.",
        "parameters": [{ "$ref": "#/components/parameters/X-Api-Version" }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderPriceResponse"
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "422": { "$ref": "#/components/responses/ValidationError" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        },
        "requestBody": {
          "required": true,
          "description": "The details of the order to estimate.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPriceRequest"
              }
            }
          }
        }
      }
    },
    "/product": {
      "get": {
        "operationId": "getProducts",
        "summary": "List products",
        "description": "List all products in your catalog",
        "tags": ["products"],
        "parameters": [
          { "$ref": "#/components/parameters/X-Api-Version" },
          {
            "in": "query",
            "name": "is_orderable",
            "description": "Filter by products which can be ordered. If `true`, returns only those which can be ordered, if `false`, returns all products.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "countries_redeemable_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "description": "ISO 3166 ALPHA-2 country code"
              }
            },
            "description": "Filter by countries where a product can be redeemed in. To specify multiple countries repeat the parameter for each country, e.g. `?countries_redeemable_in=US&countries_redeemable_in=GB`. You can pull the list of supported countries from the [list countries](/reference/2024-02-05/endpoint/products/countries) endpoint."
          },
          {
            "in": "query",
            "name": "categories",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Product category name"
              }
            },
            "description": "Filter by product categories. To specify multiple categories repeat the parameter for each category, e.g. `?categories=fashion&categories=department-stores`. You can pull the list of categories from the [list categories](/reference/2024-02-05/endpoint/products/categories) endpoint."
          },
          { "$ref": "#/components/parameters/BeforeCursor" },
          { "$ref": "#/components/parameters/AfterCursor" },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of items to be returned. See [pagination](/reference/pagination) for more information on how to use this parameter.",
            "schema": {
              "type": "integer",
              "default": 500,
              "minimum": 1,
              "maximum": 500
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of products in your catalog",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "catalog": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PageableMeta"
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/product/{product_code}": {
      "get": {
        "operationId": "getSingleProduct",
        "tags": ["products"],
        "summary": "Get product details",
        "description": "Retrieve a single product's details",
        "parameters": [
          { "$ref": "#/components/parameters/X-Api-Version" },
          {
            "required": true,
            "name": "product_code",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "description": "The code of the product."
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "description": "Defines the format for product content resources.\n\n- `url` _(default)_ for external URLs to markdown content\n- `md` for Markdown content in the response\n- `html` for rendered HTML in the response",
            "schema": {
              "type": "string",
              "enum": ["url", "md", "html"],
              "default": "url"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/product/countries": {
      "get": {
        "operationId": "listProductsCountries",
        "tags": ["products"],
        "summary": "List countries",
        "description": "Get a list of countries where products are available",
        "parameters": [{ "$ref": "#/components/parameters/X-Api-Version" }],
        "responses": {
          "200": {
            "description": "A list of countries where products are available",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "countries": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[A-Z]{2}$",
                        "description": "ISO 3166 ALPHA-2 country code"
                      },
                      "example": [
                        "AT",
                        "AU",
                        "BE",
                        "CA",
                        "CH",
                        "CZ",
                        "DE",
                        "DK",
                        "ES",
                        "FI",
                        "FR",
                        "GB",
                        "GR",
                        "HU",
                        "IE",
                        "IT",
                        "JP",
                        "LU",
                        "MX",
                        "NL",
                        "NO",
                        "NZ",
                        "PL",
                        "PT",
                        "RO",
                        "SE",
                        "SG",
                        "SI",
                        "US",
                        "ZA"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/product/categories": {
      "get": {
        "operationId": "listProductsCategories",
        "tags": ["products"],
        "summary": "List categories",
        "description": "Get a list of all possible product categories",
        "parameters": [{ "$ref": "#/components/parameters/X-Api-Version" }],
        "responses": {
          "200": {
            "description": "A list of all possible product categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "categories": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          }
                        },
                        "required": ["code"]
                      },
                      "example": [
                        { "code": "beauty-and-lifestyle" },
                        { "code": "booksellers" },
                        { "code": "department-stores" },
                        { "code": "electricals" },
                        { "code": "entertainment" },
                        { "code": "experiences" },
                        { "code": "fashion" },
                        { "code": "food-and-drink" },
                        { "code": "home-and-diy" },
                        { "code": "jewellers" },
                        { "code": "leisure-and-sports" },
                        { "code": "mens-fashion" },
                        { "code": "prepaid-card" },
                        { "code": "supermarkets" },
                        { "code": "toys-and-games" },
                        { "code": "travel" },
                        { "code": "womens-fashion" }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    }
  },
  "webhooks": {
    "order.completion": {
      "post": {
        "requestBody": {
          "description": "Sent when an order finishes processing, the body object will be one of the following schemas depending on the order status.",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  { "$ref": "#/components/schemas/CompletedOrderWebhook" },
                  { "$ref": "#/components/schemas/FailedOrderWebhook" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "product.update": {
      "post": {
        "requestBody": {
          "description": "Update on product status",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProductUpdateWebhook" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "X-Api-Version": {
        "name": "X-Api-Version",
        "description": "The dated version of the API, if not specified a default is used. See [API versioning](/best-practices/api-versioning) for more information.",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "CurrencyForAccount": {
        "name": "currency",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "^[A-Z]{3}$"
        },
        "description": "The currency of the account, represented by ISO 4217 currency codes. Check the [currencies](/reference/currency) for a listing of supported currencies.",
        "in": "query",
        "example": "USD"
      },
      "BeforeCursor": {
        "name": "before",
        "description": "A cursor for use in pagination to return the previous set of results. The before and after cursors are mutually exclusive (you can't use them at the same time). You can get a value from the `pagination.cursors.before` field in the response. See [pagination](/reference/pagination) for more information.",
        "in": "query",
        "schema": {
          "type": "string",
          "example": "A-123"
        }
      },
      "AfterCursor": {
        "name": "after",
        "description": "A cursor for use in pagination to return the next set of results. The before and after cursors are mutually exclusive (you can't use them at the same time). You can get a value from the `pagination.cursors.after` field in the response. See [pagination](/reference/pagination) for more information.",
        "in": "query",
        "schema": {
          "type": "string",
          "example": "A-789"
        }
      }
    },
    "schemas": {
      "APIErrorResponse": {
        "title": "APIErrorResponse",
        "required": ["type", "message"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "description": "An error code or type.",
            "type": "string",
            "example": "not-found"
          },
          "message": {
            "title": "Message",
            "description": "A human readable summary of the error.",
            "type": "string",
            "example": "The requested resource was not found"
          },
          "help": {
            "title": "Help",
            "description": "Additional information that pertains to the error.",
            "type": "string",
            "example": "Please check the resource ID and try again."
          }
        },
        "description": "Generic Runa API error response."
      },
      "OrderId": {
        "title": "Order ID",
        "description": "The ID of the order.",
        "type": "string",
        "example": "O-01H5WQGHKCBB85MQFM68S9KJ5Q"
      },
      "OrderDescription": {
        "title": "Description",
        "description": "Free format text reference for the order. Not visible to the end user. Will be visible to you in the Runa web portal.",
        "type": "string",
        "maxLength": 128,
        "example": "Your own reference text"
      },
      "BalanceForAccount": {
        "title": "Balance",
        "description": "The balance of the account.",
        "type": "string",
        "example": "10.00",
        "pattern": "^[0-9]+\\.[0-9]{2}$"
      },
      "CurrencyForAccount": {
        "type": "string",
        "pattern": "^[A-Z]{3}$",
        "description": "The currency of the account, represented by ISO 4217 currency codes. Check the [currencies](/reference/currency) for a listing of supported currencies.",
        "example": "USD"
      },
      "OrderStatus": {
        "title": "Order Status",
        "description": "Status of the order.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderStatusEnum"
          }
        ],
        "example": "PROCESSING"
      },
      "DistributionEmailAddress": {
        "title": "Email Address",
        "description": "The email address of the end user to send the payout link to.",
        "example": "fred@example.com",
        "type": "string",
        "format": "email"
      },
      "PayoutSelectionTemplateId": {
        "title": "Template ID",
        "description": "The template ID for a Payout Selection Template.",
        "example": "PT-01HPSF51G0ZWHJ3JTNWRH0WDYK",
        "type": "string"
      },
      "RedemptionTemplateId": {
        "title": "Template ID",
        "description": "The template ID for a User Redemption Template.",
        "example": "DT-01HPSF51G0ZWHJ3JTNWRH0WDYK",
        "type": "string"
      },
      "AccountPayment": {
        "title": "AccountPayment",
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "description": "Account balance payment.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountPaymentType"
              }
            ]
          },
          "currency": { "$ref": "#/components/schemas/CurrencyForAccount" }
        },
        "description": "Account balance payment."
      },
      "AccountPaymentType": {
        "title": "AccountPaymentType",
        "type": "string",
        "enum": ["ACCOUNT_BALANCE"],
        "description": "Account balance payment."
      },
      "CompletedOrderItem": {
        "title": "CompletedOrderItem",
        "type": "object",
        "properties": {
          "id": {
            "title": "ID",
            "description": "The ID of the order item.",
            "example": "E-NWPEKW4VL",
            "type": "string"
          },
          "distribution_method": {
            "title": "Distribution Method",
            "description": "The distribution method used for the payout link.",
            "oneOf": [
              { "$ref": "#/components/schemas/EmailDistribution" },
              { "$ref": "#/components/schemas/LinkDistribution" },
              { "$ref": "#/components/schemas/RecipientDistribution" }
            ]
          },
          "products": {
            "title": "Products",
            "description": "The product(s) the end user can redeem the payout link on.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MultipleProduct"
              },
              {
                "$ref": "#/components/schemas/SingleProduct"
              },
              {
                "$ref": "#/components/schemas/PayoutSelectionTemplateDetailed"
              },
              {
                "$ref": "#/components/schemas/UnknownProduct"
              }
            ]
          },
          "face_value": {
            "title": "Face Value",
            "description": "The face value of the payout link.",
            "example": "10",
            "type": "string"
          },
          "price": {
            "title": "Price",
            "description": "The price paid for the payout link.",
            "example": "10",
            "type": "string"
          },
          "payout": {
            "title": "Payout",
            "description": "Payout link details",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutDetails"
              }
            ]
          },
          "currency": {
            "title": "Currency",
            "description": "The currency of the payout link, represented by ISO 4217 currency codes.",
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "example": "USD"
          }
        },
        "required": [
          "id",
          "distribution_method",
          "products",
          "face_value",
          "price",
          "payout"
        ]
      },
      "CompletedOrderWithBasicDetails": {
        "title": "Completed order",
        "description": "Used for orders that have completed. This class is typically used when returning a *list* of orders to the client.",
        "required": [
          "id",
          "status",
          "created_at",
          "payment_method",
          "currency",
          "total_price",
          "total_discount"
        ],
        "type": "object",
        "properties": {
          "id": { "$ref": "#/components/schemas/OrderId" },
          "status": { "$ref": "#/components/schemas/OrderStatus" },
          "created_at": {
            "title": "Created At",
            "description": "UTC timestamp, in ISO 8601 format, when the order was submitted.",
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "title": "Completed At",
            "description": "UTC timestamp, in ISO 8601 format, when the order was completed.",
            "type": "string",
            "format": "date-time"
          },
          "description": { "$ref": "#/components/schemas/OrderDescription" },
          "payment_method": {
            "title": "Payment Method",
            "description": "The payment method used for the order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountPayment"
              }
            ]
          },
          "currency": {
            "title": "Currency",
            "example": "USD",
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "description": "The currency of the order, represented by ISO 4217 currency codes. Please check the currency section in the guidelines for how to use this field."
          },
          "total_price": {
            "title": "Total Price",
            "description": "The total price of the order. This _includes_ any applicable fees.",
            "example": "10",
            "type": "string"
          },
          "total_discount": {
            "title": "Total Discount",
            "description": "The total discount of the order.",
            "type": "string",
            "example": "1"
          }
        }
      },
      "AsyncAcceptedOrder": {
        "title": "Async Order Accepted",
        "required": ["id", "status"],
        "type": "object",
        "properties": {
          "id": { "$ref": "#/components/schemas/OrderId" },
          "status": { "$ref": "#/components/schemas/OrderStatus" }
        }
      },
      "SyncCompletedOrder": {
        "title": "CompletedOrderWithFullDetails",
        "allOf": [
          {
            "$ref": "#/components/schemas/CompletedOrderWithFullDetails"
          },
          {
            "properties": {
              "status": {
                "enum": ["COMPLETED"]
              }
            }
          }
        ]
      },
      "CompletedOrderWebhook": {
        "title": "Completed order",
        "type": "object",
        "description": "Webhook message sent when an order has completed processing.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CompletedOrderWithBasicDetails"
          },
          {
            "properties": {
              "status": {
                "enum": ["COMPLETED"]
              }
            }
          }
        ]
      },
      "FailedOrderWebhook": {
        "title": "Failed order",
        "type": "object",
        "description": "Webhook message sent when an order has failed to process.",
        "required": ["id", "status"],
        "properties": {
          "id": { "$ref": "#/components/schemas/OrderId" },
          "status": {
            "enum": ["FAILED"]
          }
        }
      },
      "RateExceededResponse": {
        "title": "RateExceededResponse",
        "required": ["error"],
        "type": "object",
        "properties": {
          "error": {
            "title": "Error",
            "description": "A human readable error message describing the error.",
            "type": "string",
            "example": "rate exceeded"
          }
        },
        "description": "API rate limited error response."
      },
      "CompletedOrderWithFullDetails": {
        "title": "Completed order",
        "description": "Used for an order that has completed. This class is typically used when returning a *single order* to the client.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CompletedOrderWithBasicDetails"
          },
          {
            "required": [
              "id",
              "status",
              "created_at",
              "payment_method",
              "currency",
              "total_price",
              "total_discount",
              "items"
            ],
            "properties": {
              "items": {
                "title": "Items",
                "description": "The list of items that were included in the order. Each _item_ represents a single payout link.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CompletedOrderItem"
                }
              },
              "transaction_detail": {
                "$ref": "#/components/schemas/TransactionDetail"
              }
            }
          }
        ]
      },
      "IncompleteOrder": {
        "title": "Incomplete order",
        "required": ["id", "status", "message"],
        "type": "object",
        "properties": {
          "id": { "$ref": "#/components/schemas/OrderId" },
          "status": { "$ref": "#/components/schemas/OrderStatus" },
          "message": {
            "title": "Message",
            "description": "Human readable message describing the status of the order.",
            "type": "string"
          }
        },
        "description": "Order that has been accepted but is not complete."
      },
      "EmailDistribution": {
        "title": "Email",
        "required": ["type", "email_address"],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/EmailDistributionType" },
          "email_address": {
            "$ref": "#/components/schemas/DistributionEmailAddress"
          },
          "template_id": { "$ref": "#/components/schemas/RedemptionTemplateId" }
        },
        "description": "Email distribution. Send the payout link to the end user directly via email."
      },
      "EmailDistributionType": {
        "title": "EmailDistributionType",
        "type": "string",
        "enum": ["EMAIL"],
        "description": "Supported email distribution types."
      },
      "LinkDistribution": {
        "title": "Link",
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/LinkDistributionType" },
          "template_id": { "$ref": "#/components/schemas/RedemptionTemplateId" }
        },
        "description": "Link distribution. Send the payout link to the end user yourself."
      },
      "LinkDistributionType": {
        "title": "LinkDistributionType",
        "type": "string",
        "enum": ["PAYOUT_LINK"],
        "description": "Supported link distribution types."
      },
      "RecipientDistribution": {
        "title": "Recipient",
        "description": "Recipient distribution. Currently this method is only supported for distributing payment type products. For subsequent orders to known recipients we will attempt to make a repeat payout.",
        "summary": "Send the payout link to a known recipient",
        "required": ["type", "recipient_reference", "email_address"],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/RecipientDistributionType" },
          "recipient_reference": {
            "title": "Recipient Reference",
            "description": "A customer provided reference to identify an individual recipient. It must be unique per recipient. When the same reference is used for a second order this will trigger a repeat payout. This is a free-form string limited to 255 characters. It can only contain alphanumeric characters, dashes, underscores, dots, and at-signs.",
            "example": "abc123",
            "type": "string",
            "maxLength": 255,
            "pattern": "^[A-Za-z0-9-_@.]+$"
          },
          "email_address": {
            "$ref": "#/components/schemas/DistributionEmailAddress"
          },
          "template_id": { "$ref": "#/components/schemas/RedemptionTemplateId" }
        }
      },
      "RecipientDistributionType": {
        "title": "RecipientDistributionType",
        "type": "string",
        "enum": ["RECIPIENT"],
        "description": "Supported recipient distribution types."
      },
      "PayoutSelectionTemplate": {
        "title": "Template",
        "required": ["type", "template_id"],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PayoutSelectionTemplateType"
          },
          "template_id": {
            "$ref": "#/components/schemas/PayoutSelectionTemplateId"
          }
        },
        "description": "Payout selection template. Template having predefined set of products."
      },
      "PayoutSelectionTemplateDetailed": {
        "title": "Template",
        "required": ["type", "template_id"],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PayoutSelectionTemplateType"
          },
          "template_id": {
            "$ref": "#/components/schemas/PayoutSelectionTemplateId"
          },
          "values": {
            "title": "Values",
            "description": "The codes for products selected for Payout Selection Template.",
            "example": ["AMZ-US", "AIRBNB-US"],
            "minItems": 2,
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        },
        "description": "Payout selection template. Template having predefined set of products."
      },
      "PayoutSelectionTemplateType": {
        "title": "PayoutSelectionTemplateType",
        "type": "string",
        "enum": ["TEMPLATE"],
        "description": "Payout Selection Template"
      },
      "NewAccountPayment": {
        "title": "NewAccountPayment",
        "required": ["type", "currency"],
        "type": "object",
        "properties": {
          "type": {
            "description": "Account balance payment method.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountPaymentType"
              }
            ]
          },
          "currency": { "$ref": "#/components/schemas/CurrencyForAccount" }
        },
        "description": "Pay using your account balance."
      },
      "NewOrderDetails": {
        "title": "NewOrderDetails",
        "required": ["payment_method", "items"],
        "type": "object",
        "properties": {
          "payment_method": {
            "title": "Payment Method",
            "description": "Payment method for the order. Select the `ACCOUNT_BALANCE` you want to pay for the order from",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewAccountPayment"
              }
            ]
          },
          "items": {
            "title": "Items",
            "description": "The list of items to be included in the order. Each item ordered results in a single payout link. The maximum number of items per order is 200.",
            "minItems": 1,
            "maxItems": 200,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewOrderItemDetails"
            }
          },
          "description": { "$ref": "#/components/schemas/OrderDescription" }
        }
      },
      "NewOrderItemDetails": {
        "title": "NewOrderItemDetails",
        "required": ["face_value", "distribution_method", "products"],
        "type": "object",
        "properties": {
          "face_value": {
            "title": "Face Value",
            "description": "Face value of the payout link. The currency of the face value is inferred from the product selection.",
            "minimum": 0.01,
            "example": 10,
            "type": "number"
          },
          "distribution_method": {
            "title": "Distribution Method",
            "description": "Distribution method to send end users the payout link. Choose `EMAIL` if you want Runa to send the payout link to the end user directly. Choose `PAYOUT_LINK` if you want to send the payout link to the end user yourself.",
            "oneOf": [
              { "$ref": "#/components/schemas/EmailDistribution" },
              { "$ref": "#/components/schemas/LinkDistribution" },
              { "$ref": "#/components/schemas/RecipientDistribution" }
            ]
          },
          "products": {
            "title": "Products",
            "description": "Choose `SINGLE` if you want the end user to redeem the face value on a single specific product. Choose `MULTIPLE` if the end user can choose to spend the face value across multiple products.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/SingleProduct"
              },
              {
                "$ref": "#/components/schemas/MultipleProduct"
              },
              {
                "$ref": "#/components/schemas/PayoutSelectionTemplate"
              }
            ]
          }
        }
      },
      "OrderItemDiscount": {
        "title": "OrderItemDiscount",
        "required": [
          "products",
          "face_value",
          "price",
          "discount_multiplier",
          "currency"
        ],
        "type": "object",
        "properties": {
          "products": {
            "title": "Products",
            "description": "Choose `SINGLE` if you want the end user to redeem the face value on a single specific product. Choose `MULTIPLE` if the end user can choose to spend the face value across multiple products.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MultipleProduct"
              },
              {
                "$ref": "#/components/schemas/SingleProduct"
              }
            ]
          },
          "face_value": {
            "title": "Face Value",
            "description": "Face value of the reward link.",
            "example": 10,
            "type": "number"
          },
          "price": {
            "title": "Price",
            "description": "The price of the order item.",
            "type": "number"
          },
          "discount_multiplier": {
            "$ref": "#/components/schemas/ProductDiscountMultiplier"
          },
          "currency": {
            "title": "Currency",
            "example": "USD",
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "description": "The currency of the product, represented by ISO 4217 currency codes. Please check the currency section in the guidelines for how to use this field."
          }
        },
        "description": "The computed discount for an order item."
      },
      "OrderItemPriceRequest": {
        "title": "OrderItemPriceRequest",
        "required": ["products", "face_value"],
        "type": "object",
        "properties": {
          "products": {
            "title": "Products",
            "description": "Choose `SINGLE` if you want the end user to redeem the face value on a single specific product. Choose `MULTIPLE` if the end user can choose to spend the face value across multiple products.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MultipleProduct"
              },
              {
                "$ref": "#/components/schemas/SingleProduct"
              }
            ]
          },
          "face_value": {
            "title": "Face Value",
            "description": "Face value of the reward link.",
            "example": 10,
            "type": "number"
          }
        },
        "description": "A proposed order item within an order price request."
      },
      "OrderPriceRequest": {
        "title": "OrderPriceRequest",
        "required": ["payment_method", "items"],
        "type": "object",
        "properties": {
          "payment_method": {
            "title": "Payment Method",
            "description": "Payment method for the order. Select the `ACCOUNT_BALANCE` you want to pay for the order from.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewAccountPayment"
              }
            ]
          },
          "items": {
            "title": "Items",
            "description": "List of order items for price estimation.",
            "minItems": 1,
            "maxItems": 500,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemPriceRequest"
            }
          }
        },
        "description": "Request for a price estimate for an order."
      },
      "OrderPriceResponse": {
        "title": "OrderPriceResponse",
        "required": [
          "payment_method",
          "items",
          "currency",
          "total_discount",
          "total_price"
        ],
        "type": "object",
        "properties": {
          "payment_method": {
            "title": "Payment Method",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountPayment"
              }
            ]
          },
          "items": {
            "title": "Items",
            "description": "List of order items with price and discount.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemDiscount"
            }
          },
          "currency": {
            "title": "Currency",
            "example": "USD",
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "description": "The currency of the order, represented by ISO 4217 currency codes. Please check the currency section in the guidelines for how to use this field."
          },
          "total_discount": {
            "title": "Total Discount",
            "description": "Total discount on the entire order.",
            "type": "number"
          },
          "total_price": {
            "title": "Total Price",
            "description": "Total price of the entire order.",
            "type": "number"
          },
          "transaction_detail": {
            "$ref": "#/components/schemas/TransactionDetail"
          }
        },
        "description": "Response object for a order price estimate."
      },
      "OrderStatusEnum": {
        "title": "OrderStatusEnum",
        "type": "string",
        "enum": ["COMPLETED", "FAILED", "PROCESSING"],
        "description": "The status of the order."
      },
      "TransactionDetail": {
        "title": "TransactionDetail",
        "description": "A mapping of the subtotal of the order using the payout currency as a key.",
        "type": "object",
        "example": {
          "USD": {
            "value": "10.00",
            "fx": null
          }
        },
        "additionalProperties": {
          "$ref": "#/components/schemas/TransactionDetailEntry"
        }
      },
      "TransactionDetailEntry": {
        "type": "object",
        "title": "TransactionDetailEntry",
        "description": "A subtotal of the value purchased and associated fees and data about the transaction.",
        "properties": {
          "value": {
            "title": "Value",
            "description": "The total value purchased of a payout link currency.",
            "type": "string",
            "example": "10.00"
          },
          "fx": {
            "$ref": "#/components/schemas/TransactionDetailFXDetails"
          }
        },
        "required": ["value"]
      },
      "TransactionDetailFXDetails": {
        "type": "object",
        "title": "TransactionDetailFxDetails",
        "description": "Provides details on fx conversion for an order transaction detail. Present when the payment method currency is different from the transaction detail currency.",
        "properties": {
          "rate": {
            "title": "FX Rate",
            "description": "The FX rate received for the transaction between the payout currency and payment currency.",
            "type": "string",
            "example": "1.234"
          },
          "rate_symbol": {
            "title": "FX Rate symbol",
            "description": "The currency pair associated with the FX transaction.",
            "type": "string",
            "example": "GBPUSD"
          },
          "fee": {
            "title": "Fee",
            "description": "The fee charged for making this transaction.",
            "type": "object",
            "properties": {
              "value": {
                "title": "Value",
                "description": "The value of the fee.",
                "type": "string",
                "example": "0.00"
              },
              "currency": {
                "title": "Currency",
                "description": "The currency of the fee.",
                "type": "string",
                "example": "USD"
              }
            },
            "required": ["value", "currency"]
          }
        },
        "required": ["rate", "rate_symbol", "fee"]
      },
      "Page": {
        "title": "Page",
        "type": "object",
        "properties": {
          "limit": {
            "title": "Limit",
            "description": "How many records the current page is limited to.",
            "example": 100,
            "type": "integer"
          }
        }
      },
      "PageCursors": {
        "title": "PageCursors",
        "type": "object",
        "properties": {
          "after": {
            "title": "After",
            "description": "Cursor to query the next page.",
            "example": "A-789",
            "type": "string"
          },
          "before": {
            "title": "Before",
            "description": "Cursor to query the previous page.",
            "example": "A-123",
            "type": "string"
          }
        }
      },
      "PageableMeta": {
        "title": "PageableMeta",
        "required": ["cursors", "page"],
        "type": "object",
        "description": "Information about the page of results returned. See [pagination](/reference/pagination) for more information on how to page through results.",
        "properties": {
          "cursors": {
            "title": "Cursors",
            "description": "Pagination cursors, use the `after` cursor to page forward and the `before` cursor to page backward.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PageCursors"
              }
            ]
          },
          "page": {
            "title": "Page",
            "description": "Extra information about the current page.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Page"
              }
            ]
          }
        }
      },
      "SingleProduct": {
        "title": "Single",
        "required": ["type", "value"],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SingleProductType"
          },
          "value": {
            "title": "Value",
            "description": "The code for the product the end user will get when redeeming their payout link.",
            "minLength": 1,
            "example": "AMZ-US",
            "type": "string"
          }
        },
        "description": "Single product. The end user will be able to redeem the payout link for this specific product."
      },
      "SingleProductType": {
        "title": "SingleProductType",
        "type": "string",
        "enum": ["SINGLE"],
        "description": "Single product. When only one product code is provided."
      },
      "MultipleProduct": {
        "title": "Multiple",
        "required": ["type", "values"],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/MultipleProductType"
          },
          "values": {
            "title": "Values",
            "description": "The codes for the products the end user can choose from when redeeming their payout link. All products _must_ use the same currency.",
            "example": ["AMZ-US", "AIRBNB-US"],
            "minItems": 2,
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        },
        "description": "Multiple products. The end user will be able to split the payout link's value between these products."
      },
      "MultipleProductType": {
        "title": "MultipleProductType",
        "type": "string",
        "enum": ["MULTIPLE"],
        "description": "Multiple products. When more than one product code is provided."
      },
      "UnknownProduct": {
        "title": "Unknown",
        "type": "object",
        "description": "Product(s) unknown. It was not possible to determine which products were included in the order.",
        "required": ["type"],
        "properties": {
          "type": {
            "title": "Type",
            "description": "It is not currently possible to determine which products were selected when this item was ordered.",
            "default": "UNKNOWN",
            "type": "string",
            "enum": ["UNKNOWN"]
          }
        }
      },
      "ProductUpdateWebhook": {
        "title": "Product update webhook",
        "type": "object",
        "required": ["product_code", "old_state", "new_state", "timestamp"],
        "properties": {
          "product_code": {
            "type": "string",
            "description": "The code of the product that was updated.",
            "example": "XYZ-US"
          },
          "old_state": {
            "description": "The state of the product before the update.",
            "$ref": "#/components/schemas/ProductUpdateState"
          },
          "new_state": {
            "description": "The state of the product after the update.",
            "$ref": "#/components/schemas/ProductUpdateState"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "UTC timestamp, in ISO 8601 format, when the product was updated."
          }
        }
      },
      "ProductUpdateState": {
        "title": "Product update state",
        "description": "The state of the product either before or after the update.",
        "required": ["price_multiplier", "is_orderable"],
        "properties": {
          "price_multiplier": {
            "$ref": "#/components/schemas/ProductDiscountMultiplier"
          },
          "is_orderable": { "$ref": "#/components/schemas/ProductIsOrderable" },
          "denominations": {
            "$ref": "#/components/schemas/ProductDenominations"
          }
        }
      },
      "PayoutStatus": {
        "title": "Payout status",
        "description": "Current status of the payout link. An `ACTIVE` link is live but has not been claimed yet, it will change to `CLAIMED` once that has happened. If you request a cancellation the status will reflect this as `CANCELLED`. Finally if your account is configured with expiry, when a link expires it will be marked as `EXPIRED`.",
        "enum": ["ACTIVE", "CLAIMED", "CANCELLED", "EXPIRED"]
      },
      "PayoutDetails": {
        "title": "PayoutDetails",
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PayoutStatus"
          },
          "status_updated_at": {
            "title": "Status Updated At",
            "description": "Time that the payout link status was last updated",
            "type": "string",
            "format": "date-time"
          },
          "url": {
            "title": "Url",
            "description": "The URL (payout link) the end user uses to redeem.",
            "type": "string"
          },
          "expiry_date": {
            "title": "Expiry Date",
            "description": "The date that the payout link expires.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["status", "status_updated_at", "url"]
      },
      "ValidationErrorItem": {
        "title": "ValidationErrorItem",
        "required": ["type", "message", "location"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "description": "The type of error encountered.",
            "type": "string",
            "example": "value_error.number.not_ge"
          },
          "message": {
            "title": "Message",
            "description": "A human readable summary of the error.",
            "type": "string",
            "example": "ensure this value is greater than or equal to 1"
          },
          "location": {
            "title": "Location",
            "description": "The location of the error in the submitted entity.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["items", "0", "face_value"]
          }
        },
        "description": "A single validation error. The type indicates the error type and the message provides a human readable summary of the error. The location provides a path to the key in the request body."
      },
      "ValidationErrorResponse": {
        "title": "ValidationErrorResponse",
        "required": ["type", "message", "details"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "description": "An error code or type.",
            "type": "string",
            "example": "validation_error"
          },
          "message": {
            "title": "Message",
            "description": "A human readable summary of the error.",
            "type": "string",
            "example": "There were one or more problems processing your request, see details key."
          },
          "help": {
            "title": "Help",
            "description": "Additional information that pertains to the error.",
            "type": "string",
            "example": null
          },
          "details": {
            "title": "Details",
            "description": "Additional details regarding the error.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationErrorItem"
            }
          }
        },
        "description": "A validation error response. Returned when the request failed validation. This response can contain multiple validation errors, see the details key for each."
      },
      "Product": {
        "type": "object",
        "description": "Product details",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the product.",
            "example": "Example Merchant"
          },
          "code": {
            "type": "string",
            "description": "A unique code identifying the product. Use this code when placing an order. \n\n_For `subscription` products, this code identifies the top level product. You must use the `subscription_plan_code` instead when ordering._",
            "example": "XYZ-US"
          },
          "currency": {
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "description": "The currency of the product, represented by an ISO 4217 currency code. See [currencies](/reference/currencies) for a list of supported currencies.",
            "example": "USD"
          },
          "state": {
            "type": "string",
            "enum": ["LIVE", "TEMPORARILY_DISABLED", "TEMPORARILY_DEGRADED"],
            "description": "The current state of the product.",
            "example": "LIVE"
          },
          "is_orderable": { "$ref": "#/components/schemas/ProductIsOrderable" },
          "payout_type": {
            "type": "string",
            "enum": ["gift_card", "subscription", "payment"],
            "description": "The type of payout - this field will tell you the key of the additional object details that correspond to each payout type. The types currently supported are `gift_card`, `subscription`, or `payment`. Your implementation should account for additional payout types being addedin the future."
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of the categories that the product belongs to. You can fetch the list of categories using the [`GET /product/categories` endpoint](/reference/2024-02-05/endpoint/products/categories).",
            "example": ["food-and-drink", "entertainment"]
          },
          "countries_redeemable_in": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[A-Z]{2}$",
              "description": "ISO 3166 ALPHA-2 country code"
            },
            "description": "Countries where the payout can be spent.",
            "example": ["US"]
          },
          "customer_service": {
            "$ref": "#/components/schemas/ProductCustomerService"
          },
          "discount_multiplier": {
            "$ref": "#/components/schemas/ProductDiscountMultiplier"
          },
          "availability": {
            "type": "string",
            "enum": ["stocked", "realtime"],
            "description": "The availability type of the product.",
            "example": "realtime"
          },
          "gift_card": {
            "description": "Specific details about the gift card product, only populated when the `payout_type` is `gift_card`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutTypeDetailsBase"
              },
              {
                "type": "object",
                "properties": {
                  "denominations": {
                    "$ref": "#/components/schemas/ProductDenominations"
                  }
                }
              }
            ]
          },
          "subscription": {
            "description": "Details about the subscription product, only populated when the `payout_type` is `subscription`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutTypeDetailsBase"
              },
              {
                "type": "object",
                "properties": {
                  "subscription_plans": {
                    "description": "A list of subscription plans available for the product. You must use the `subscription_plan_code` when ordering a subscription plan, not the top-level `code`.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ProductSubscriptionPlan"
                    }
                  }
                }
              }
            ]
          },
          "payment": {
            "description": "Details about the payment product, only populated when the `payout_type` is `payment`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductPayment"
              }
            ]
          }
        },
        "required": [
          "categories",
          "code",
          "countries_redeemable_in",
          "currency",
          "customer_service",
          "discount_multiplier",
          "name",
          "state",
          "is_orderable",
          "payout_type"
        ]
      },
      "PayoutTypeDetailsBase": {
        "type": "object",
        "properties": {
          "assets": {
            "$ref": "#/components/schemas/ProductAssets"
          },
          "balance_check_url": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "description": "URL to check the gift card balance. This will be a provider specific URL that a consumer can use to check the balance of the gift card.",
            "example": "https://merchant.example.com/balance-check"
          },
          "content_resources": {
            "$ref": "#/components/schemas/ContentResources"
          },
          "expiry": {
            "$ref": "#/components/schemas/ProductExpiry"
          },
          "redeemable_at": {
            "description": "Defines where the gift card can be redeemed. Options are `all` for both online and in-store, `in-store` for in-store only, and `online` for online only.",
            "type": "string",
            "enum": ["all", "online", "in-store"],
            "example": "all"
          },
          "website_url": {
            "description": "The URL of the website for the product. This is the URL that a consumer can use to either redeem the payout or view details about where they can redeem the payout.",
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://merchant.example.com"
          },
          "barcode_format": {
            "type": "string",
            "enum": [
              "code-128",
              "code-39",
              "QR",
              "ean-13",
              "pdf417",
              "ITF",
              "DATA_MATRIX",
              "other"
            ],
            "nullable": true,
            "description": "The barcode format of the product.",
            "example": "code-128"
          },
          "e_code_usage_type": {
            "type": "string",
            "enum": ["undefined", "url-recommended", "url-only"],
            "description": "The e-code usage type of the product.",
            "example": "url-only"
          }
        }
      },
      "ProductSubscriptionPlan": {
        "type": "object",
        "properties": {
          "length_unit": {
            "description": "The unit of time for the subscription plan. Currently `DAYS` and `MONTHS` are supported.",
            "type": "string",
            "enum": ["DAYS", "MONTHS"],
            "example": "MONTHS"
          },
          "length": {
            "type": "integer",
            "description": "The length of the subscription plan using the `length_unit`.",
            "example": 12
          },
          "name": {
            "type": "string",
            "description": "The name of the subscription plan.",
            "example": "3 month subscription"
          },
          "price": {
            "type": "string",
            "format": "decimal",
            "description": "The price of the subscription plan.",
            "example": "10.00"
          },
          "subscription_plan_code": {
            "description": "Use this code during order creation, rather than the top level `code`.",
            "type": "string",
            "example": "XYZ-US-SUB-1"
          }
        }
      },
      "ProductPayment": {
        "type": "object",
        "properties": {
          "assets": {
            "type": "object",
            "required": ["icon_image_url", "primary_color"],
            "properties": {
              "icon_image_url": {
                "$ref": "#/components/schemas/ProductIconImageUrl"
              },
              "primary_color": {
                "$ref": "#/components/schemas/ProductPrimaryColor"
              }
            }
          },
          "denominations": {
            "type": "object",
            "required": ["minimum_value", "maximum_value"],
            "properties": {
              "minimum_value": {
                "$ref": "#/components/schemas/ProductMinimumValue"
              },
              "maximum_value": {
                "$ref": "#/components/schemas/ProductMaximumValue"
              }
            }
          },
          "content_resources": {
            "$ref": "#/components/schemas/ContentResources"
          }
        },
        "required": ["assets", "denominations"]
      },
      "ProductCustomerService": {
        "type": "object",
        "description": "Contact information for customer service related to the product. Suitable for displaying to the customer.",
        "properties": {
          "phone_number": {
            "type": "string",
            "nullable": true,
            "description": "The customer service phone number.",
            "example": "+1234567890"
          },
          "website_url": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "description": "The customer service website URL.",
            "example": "https://merchant.example.com/customer-service"
          }
        }
      },
      "ProductDenominations": {
        "type": "object",
        "description": "Defines the denomination options available for the product, including ranges and types.",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["open", "fixed"],
            "description": "The type of denomination. Can be `open` or `fixed`. `open` is any amount between minimum and maximum value. Fixed is limited to those returned in the `available_list`.",
            "example": "fixed"
          },
          "minimum_value": {
            "$ref": "#/components/schemas/ProductMinimumValue"
          },
          "maximum_value": {
            "$ref": "#/components/schemas/ProductMaximumValue"
          },
          "available_list": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "decimal"
            },
            "nullable": true,
            "description": "A list of available denominations for the product. Will be `null` if the `type` is `OPEN`.",
            "example": ["10.00", "20.00", "50.00", "100.00"]
          }
        }
      },
      "ProductExpiry": {
        "type": "object",
        "properties": {
          "date_policy": {
            "type": "string",
            "nullable": true,
            "description": "Text description of the policy, suitable for displaying to the customer.",
            "example": "Expires 2 years from issue date"
          },
          "in_months": {
            "type": "integer",
            "description": "Specifies the number of months until the gift expires.",
            "example": 12
          },
          "type": {
            "type": "string",
            "description": "The type of expiry policy. \n\n | Type | Description | \n | --- | --- | \n | `from-last-use` | The expiration period starts after the gift is used for a purchase. | \n | `from-last-balance-check` | The expiration period starts after the gift balance is checked using phone or online tools. | \n | `from-issue-date` | The expiration period starts from the date the gift was purchased. | \n | `indefinite` | The gift card does not expire and remains valid indefinitely. | \n | `do-not-show` | No expiration information is displayed. |",
            "enum": [
              "from-last-use",
              "from-last-balance-check",
              "from-issue-date",
              "indefinite",
              "do-not-show"
            ],
            "example": "from-issue-date"
          }
        }
      },
      "ProductIsOrderable": {
        "type": "boolean",
        "description": "Indicates whether or not you are able to order the product. You should use this detail to determine whether or not to display the product to your end users.\n\nWe recommend that you only display products to customers when this field is `true` - we will reject any orders placed for products where this is `false`. You can filter by `is_orderable` to only return products that can be ordered in the list endpoint."
      },
      "ProductDiscountMultiplier": {
        "type": "string",
        "pattern": "^[0-9]+\\.[0-9]{2}$",
        "description": "The discount multiplier used when ordering. `0` means no discount and `0.1` means 10% discount. The discount is applied on the price of the order item before any fees are applied.",
        "example": "0.05"
      },
      "ProductMinimumValue": {
        "type": "string",
        "format": "decimal",
        "description": "The minimum denomination value available for the product.",
        "example": "10.00"
      },
      "ProductMaximumValue": {
        "type": "string",
        "format": "decimal",
        "description": "The maximum denomination value available for the product.",
        "example": "100.00"
      },
      "ProductIconImageUrl": {
        "type": "string",
        "format": "uri",
        "description": "The URL of the icon image for the product.",
        "example": "https://gift.runa.io/static/product_assets/XYZ-US/XYZ-US-icon.png"
      },
      "ProductPrimaryColor": {
        "type": "string",
        "pattern": "^#[0-9A-Fa-f]{6}$",
        "description": "The primary color of the product.",
        "example": "#000000"
      },
      "ProductAssets": {
        "title": "Product assets",
        "description": "Graphical assets for the product, including card image, icon image, and primary color.",
        "type": "object",
        "properties": {
          "card_image_url": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://gift.runa.io/static/product_assets/XYZ-US/XYZ-US-card.png"
          },
          "icon_image_url": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://gift.runa.io/static/product_assets/XYZ-US/XYZ-US-icon.png"
          },
          "primary_color": {
            "type": "string",
            "pattern": "^#[0-9A-Fa-f]{6}$",
            "nullable": true,
            "example": "#000000"
          }
        }
      },
      "ContentResourcesLocale": {
        "type": "string",
        "description": "What locale the content resources are in. This is an [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) using an underscore to separate the language and country codes.",
        "pattern": "^[a-z]{2}_[A-Z]{2}$",
        "example": "en_US"
      },
      "ContentResources": {
        "title": "Content resources",
        "description": "Content resources provide additional information about the product, including:\n\n- Product description\n- Disclaimers\n- Refund policy\n- Reissuance policy \n- Terms and conditions\n- Redemption instructions\n\nThis content can be returned in different formats based on the `content` query parameter in the [get product endpoint](/reference/2024-02-05/endpoint/products/get#parameter-content). The list endpoint only supports returning content as URLs.\n\nContent fields will be present when content is available, and `null` when content has been removed. We update content periodically - if content has been removed, requests will return a `403` or `404` error. Your implementation should handle these errors gracefully.",
        "oneOf": [
          { "$ref": "#/components/schemas/ContentResourcesUrl" },
          { "$ref": "#/components/schemas/ContentResourcesMarkdown" },
          { "$ref": "#/components/schemas/ContentResourcesHTML" }
        ]
      },
      "ContentResourcesUrl": {
        "title": "URL",
        "description": "Content resources in URL format.",
        "type": "object",
        "required": [
          "description_markdown_url",
          "disclaimer_markdown_url",
          "refund_policy_markdown_url",
          "reissuance_policy_markdown_url",
          "terms_buyer_markdown_url",
          "terms_consumer_markdown_url",
          "redemption_instructions_markdown_url",
          "locale"
        ],
        "properties": {
          "description_markdown_url": {
            "type": "string",
            "format": "uri",
            "nullable": false,
            "description": "A URL pointing to a markdown file that contains the description of the resource.",
            "example": "https://d2abcdef.cloudfront.net/resources/XYZ-US/description.md"
          },
          "disclaimer_markdown_url": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A URL pointing to a markdown file that contains the disclaimer information.",
            "example": "https://d2abcdef.cloudfront.net/resources/XYZ-US/disclaimer_markdown.md"
          },
          "refund_policy_markdown_url": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A URL pointing to a markdown file that outlines the refund policy, if applicable.",
            "example": "https://d2abcdef.cloudfront.net/resources/XYZ-US/refund_policy_markdown.md"
          },
          "reissuance_policy_markdown_url": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A URL pointing to a markdown file that details the reissuance policy for the resource.",
            "example": "https://d2abcdef.cloudfront.net/resources/XYZ-US/reissuance_policy_markdown.md"
          },
          "terms_buyer_markdown_url": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A URL pointing to a markdown file that contains the terms and conditions applicable to buyers.",
            "example": "https://d2abcdef.cloudfront.net/resources/XYZ-US/terms_buyer.md"
          },
          "terms_consumer_markdown_url": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A URL pointing to a markdown file that contains the terms and conditions applicable to consumers.",
            "example": "https://d2abcdef.cloudfront.net/resources/XYZ-US/terms_consumer.md"
          },
          "redemption_instructions_markdown_url": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A URL pointing to a markdown file that provides instructions for redeeming the resource.",
            "example": "https://d2abcdef.cloudfront.net/resources/XYZ-US/redeem_markdown.md"
          },
          "locale": { "$ref": "#/components/schemas/ContentResourcesLocale" }
        }
      },
      "ContentResourcesMarkdown": {
        "title": "Markdown",
        "description": "Content resources in Markdown format.",
        "type": "object",
        "required": [
          "description_md",
          "disclaimer_md",
          "refund_policy_md",
          "reissuance_policy_md",
          "terms_buyer_md",
          "terms_consumer_md",
          "redemption_instructions_md",
          "locale"
        ],
        "properties": {
          "description_md": {
            "type": "string",
            "description": "Markdown content for the resource description.",
            "nullable": false
          },
          "disclaimer_md": {
            "type": "string",
            "nullable": true,
            "description": "Markdown content for the disclaimer information."
          },
          "refund_policy_md": {
            "type": "string",
            "nullable": true,
            "description": "Markdown content outlining the refund policy, if applicable."
          },
          "reissuance_policy_md": {
            "type": "string",
            "nullable": true,
            "description": "Markdown content detailing the reissuance policy for the resource."
          },
          "terms_buyer_md": {
            "type": "string",
            "nullable": true,
            "description": "Markdown content containing terms and conditions applicable to buyers."
          },
          "terms_consumer_md": {
            "type": "string",
            "nullable": true,
            "description": "Markdown content containing terms and conditions applicable to consumers."
          },
          "redemption_instructions_md": {
            "type": "string",
            "nullable": true,
            "description": "Markdown instructions for redeeming the resource."
          },
          "locale": { "$ref": "#/components/schemas/ContentResourcesLocale" }
        }
      },
      "ContentResourcesHTML": {
        "title": "HTML",
        "description": "Content resources in HTML format.",
        "type": "object",
        "required": [
          "description_html",
          "disclaimer_html",
          "refund_policy_html",
          "reissuance_policy_html",
          "terms_buyer_html",
          "terms_consumer_html",
          "redemption_instructions_html",
          "locale"
        ],
        "properties": {
          "description_html": {
            "type": "string",
            "format": "html",
            "nullable": false,
            "description": "HTML content for the resource description."
          },
          "disclaimer_html": {
            "type": "string",
            "format": "html",
            "nullable": true,
            "description": "HTML content for the disclaimer information."
          },
          "refund_policy_html": {
            "type": "string",
            "format": "html",
            "nullable": true,
            "description": "HTML content outlining the refund policy, if applicable."
          },
          "reissuance_policy_html": {
            "type": "string",
            "format": "html",
            "nullable": true,
            "description": "HTML content detailing the reissuance policy for the resource."
          },
          "terms_buyer_html": {
            "type": "string",
            "format": "html",
            "nullable": true,
            "description": "HTML content containing terms and conditions applicable to buyers."
          },
          "terms_consumer_html": {
            "type": "string",
            "format": "html",
            "nullable": true,
            "description": "HTML content containing terms and conditions applicable to consumers."
          },
          "redemption_instructions_html": {
            "type": "string",
            "format": "html",
            "nullable": true,
            "description": "HTML instructions for redeeming the resource."
          },
          "locale": { "$ref": "#/components/schemas/ContentResourcesLocale" }
        }
      }
    },
    "responses": {
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIErrorResponse"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIErrorResponse"
            }
          }
        }
      },
      "RateExceeded": {
        "description": "Rate limit exceeded",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RateExceededResponse"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIErrorResponse"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIErrorResponse"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIErrorResponse"
            }
          }
        }
      },
      "ValidationError": {
        "description": "Request failed validation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationErrorResponse"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Api-Key",
        "description": "Your API key. See the [API key](/getting-started/api-key) page on details of how to generate and store your keys."
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}
